<#@ template language="C#" #>// <auto-generated />

using System;

namespace Theraot.Core
{<#
    for (var indice = 0; indice < 17; indice++)
    {#>

    [global::System.Diagnostics.DebuggerNonUserCode]
    public struct ErsatzFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>
    {
        private Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> _target;
        private TReturn _result;
        <# if (indice != 0) { #>private <# if (indice == 1) #>T _obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>;
        private <#}#>T<#=subindice#> _arg<#=subindice#><#} #>;
        <#}#>

        public ErsatzFunc(Func<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn> target<# if (indice != 0) { #>, <# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            _result = default(TReturn);
            _target = target ?? FuncHelper.GetDefaultFunc<<# if (indice != 0) { if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>, <#}#>TReturn>();
<# if (indice != 0)
               {
                 if (indice == 1) #>            _obj = obj;
<#
                 else
                 for (var subindice = 1; subindice <= indice; subindice++)
                 {
                   if (subindice != 1)
                   {#>
<#
                   }#>            _arg<#=subindice#> = arg<#=subindice#><#
                   #>;
<#
                   if (subindice != indice)
                   {#>
<#
                   }
                 }
               }#>
        }

        public TReturn Result
        {
            get
            {
                return _result;
            }
        }

        public void Invoke()
        {
            _result = _target.Invoke(<# if (indice != 0) { if (indice == 1) #>_obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>_arg<#=subindice#><#}}#>);
        }

        public Action InvokeAction()
        {
            return new Action(Invoke);
        }
    }
    <#}
    for (var indice = 0; indice < 17; indice++)
    {#>

    [global::System.Diagnostics.DebuggerNonUserCode]
    public struct ErsatzAction<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>
    
    {
        private Action<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> _target;
        <# if (indice != 0) { #>private <# if (indice == 1) #>T _obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>;
        private <#}#>T<#=subindice#> _arg<#=subindice#><#} #>;
        <#}#>

        public ErsatzAction(Action<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> target<# if (indice != 0) { #>, <# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}}#>)
        {
            _target = target ?? ActionHelper.GetNoopAction<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>();
<# if (indice != 0)
               {
                 if (indice == 1) #>            _obj = obj;
<#
                 else
                 for (var subindice = 1; subindice <= indice; subindice++)
                 {
                   if (subindice != 1)
                   {#>
<#
                   }#>            _arg<#=subindice#> = arg<#=subindice#><#
                   #>;
<#
                   if (subindice != indice)
                   {#>
<#
                   }
                 }
               }#>
        }

        public void Invoke()
        {
            _target.Invoke(<# if (indice != 0) { if (indice == 1) #>_obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>_arg<#=subindice#><#}}#>);
        }

        public Action InvokeAction()
        {
            return new Action(Invoke);
        }
    }
<#
    }#>}